#include <stdio.h>
#include <stdlib.h>
int reverse(double **a,double **a_1, int n) {
    int flag=0;
    for(int i=0;i<n;i++){
        flag=1;
        if (a[i][i] == 0) {
            for (int j = i + 1; j < n; j++) {
                if (a[j][i] != 0) {
                    for (int k = i; k < n; k++) {
                        double temp = a[j][k];
                        a[j][k] = a[i][k];
                        a[i][k] = temp;
                        temp = a_1[j][k];
                        a_1[j][k] = a_1[i][k];
                        a_1[i][k] = temp;
                    }
                    flag=0;
                    break;
                }
            }

        }
        else flag=0;
        if(flag){ printf( "reverse matrix doesn't exist" );
        return 0;}

        for (int j=0;j<n;j++){
            if(a[j][i] !=0 && j != i){
                double temp=a[j][i]/a[i][i];
                for(int k=0;k<n;k++){
                    a[j][k]-=a[i][k]*temp;
                    a_1[j][k]-=a_1[i][k]*temp;
                }

            }
        }

    }
    return 1;
}
void multi( double **a,double **a_1,int n ){
    for (int i=0;i<n;i++){
        double x=1/a[i][i];
        for (int j=0;j<n;j++){
            a_1[i][j]*=x;

        }
    }

}
void answer(double **a_1, int n){
    for(int i =0;i<n;i++){
        for( int j=0; j<n;j++){
            printf("%lf ",a_1[i][j]);
        }
        printf("\n");
    }
}
void cleaner(double **a,int n){
    for(int i =0;i<n;i++){
        for( int j=0; j<n;j++){
            free(a[i]);
        }

    }
    free(a);
}
int main(){
    int n;
    scanf("%d",&n);
    double **a=(double**)calloc(n,sizeof(double*));

    double **a_1=(double**)calloc(n,sizeof(double*));
    for (int i=0;i<n;i++){
        *(a+i)=(double*)calloc(n,sizeof(double));
        *(a_1+i)=(double*)calloc(n,sizeof(double));
        a_1[i][i]=1;
        for(int j =0;j<n;j++){
            scanf("%lf",&a[i][j]);
        }
    }


if(reverse(a,a_1,n)) {
    multi(a, a_1, n);
    answer(a_1, n);
}
cleaner(a, n);
cleaner(a_1, n);

}
